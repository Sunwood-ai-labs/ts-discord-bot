name: Issue Response Bot (Codex with gh)

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: write
  pull-requests: write

jobs:
  respond-to-issue:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install OpenAI Codex
        run: npm install -g @openai/codex@0.1.2504251709
        
      - name: GitHub CLIをインストール
        run: |
          type -p curl >/dev/null || apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
          
      - name: Post Initial Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 処理開始メッセージと折りたたみセクションでコード表示
          gh issue comment ${{ github.event.issue.number }} --body '🚀 処理を開始します...

          <details>
          <summary>Codexへの指示内容</summary>

          ```
          以下のissueに対する対応計画を立て、ghコマンドでコメントしてください：
          
          Issue番号: #${{ github.event.issue.number }}
          タイトル: ${{ github.event.issue.title }}
          内容: ${{ github.event.issue.body }}
          
          実行してください：
          1. issueを分析して対応方針を決定
          2. ghコマンドで計画をissueにコメント (例: gh issue comment #番号 --body '"'"'内容'"'"')
          3. 必要なコード修正やドキュメント更新を実施
          ```
          </details>'

      - name: Debug Information
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # コマンドを実行して結果を取得
          echo "Codexの詳細情報を取得中..."
          
          # 情報収集
          SYSTEM_INFO=$(uname -a)
          OS_INFO=$(cat /etc/os-release 2>/dev/null || lsb_release -a 2>/dev/null)
          NODE_VERSION=$(node -v)
          NPM_VERSION=$(npm -v)
          CODEX_VERSION=$(codex --version 2>/dev/null || echo 'バージョン取得失敗')
          CODEX_PATH=$(which codex 2>/dev/null || echo '場所不明')
          CODEX_PACKAGE_INFO=$(npm list -g @openai/codex 2>/dev/null || echo '情報取得失敗')
          NPM_VERSIONS=$(npm view @openai/codex versions --json 2>/dev/null || echo '[]')
          
          # cgroup確認
          if [ -f /proc/1/cgroup ]; then
            CGROUP_EXISTS="✅ 存在します"
            CGROUP_CONTENT=$(head -n 5 /proc/1/cgroup)
          else
            CGROUP_EXISTS="❌ 存在しません"
            CGROUP_CONTENT=""
          fi
          
          # codexコマンドのヘルプ情報
          CODEX_HELP=$(codex --help 2>&1 | head -n 20)
          
          # 結果をファイルに保存
          echo "環境情報をissueにコメントします"
          {
            echo "## 🔍 デバッグ情報"
            echo "<details>"
            echo "<summary>詳細情報（クリックして展開）</summary>"
            echo ""
            echo "サンドボックスエラー「Sandbox was mandated, but no sandbox is available!」のデバッグ情報："
            echo ""
            echo "### システム環境"
            echo "\`\`\`"
            echo "$SYSTEM_INFO"
            echo "$OS_INFO"
            echo "\`\`\`"
            echo ""
            echo "### Node.js & npm 情報"
            echo "\`\`\`"
            echo "Node.js: $NODE_VERSION"
            echo "npm: $NPM_VERSION"
            echo "\`\`\`"
            echo ""
            echo "### Codex情報"
            echo "\`\`\`"
            echo "Version: $CODEX_VERSION"
            echo "Path: $CODEX_PATH"
            echo "Package info: "
            echo "$CODEX_PACKAGE_INFO"
            echo "\`\`\`"
            echo ""
            echo "### 利用可能なCodexバージョン"
            echo "\`\`\`"
            echo "$NPM_VERSIONS" | jq -r 'if type=="array" then .[-5:] else . end' 2>/dev/null || echo "$NPM_VERSIONS"
            echo "\`\`\`"
            echo ""
            echo "### サンドボックス関連"
            echo "/proc/1/cgroup ファイル: $CGROUP_EXISTS"
            if [ -n "$CGROUP_CONTENT" ]; then
              echo "\`\`\`"
              echo "$CGROUP_CONTENT"
              echo "\`\`\`"
            fi
            echo ""
            echo "### Codexヘルプ情報"
            echo "\`\`\`"
            echo "$CODEX_HELP"
            echo "\`\`\`"
            echo ""
            echo "### 対応策"
            echo "1. \`--approval=auto\` または \`--approval=manual\` オプションを試す"
            echo "2. 最新バージョンに更新: \`npm install -g @openai/codex@latest\`"
            echo "3. 環境変数の設定: \`FORCE_DISABLE_SANDBOX=true codex ...\`"
            echo "</details>"
          } > debug_info.txt
          
          # ファイル内容を表示（ログ用）
          cat debug_info.txt
          
          # Issueにコメント
          gh issue comment ${{ github.event.issue.number }} --body-file debug_info.txt
      
          
      - name: Analyze and Plan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Codexに計画を立てさせ、issueにコメントさせる
          codex --full-auto  --quiet  "以下のissueに対する対応計画を立て、ghコマンドでコメントしてください：
          
          Issue番号: #${{ github.event.issue.number }}
          タイトル: ${{ github.event.issue.title }}
          内容: ${{ github.event.issue.body }}
          
          実行してください：
          1. issueを分析して対応方針を決定
          2. ghコマンドで計画をissueにコメント (例: gh issue comment #番号 --body '内容')
          3. 必要なコード修正やドキュメント更新を実施
          
          # 重要：複雑な文字列を扱う際は、エスケープ問題を避けるために一時ファイルを使用してください。
          # 例えば、gh issue comment や gh pr create コマンドでは --body よりも --body-file を使用してください。
          # 
          # 以下のような方法で実装してください：
          # 1. 本文内容をファイルに書き出す: echo '内容' > comment.txt
          # 2. ファイルを参照: gh issue comment 番号 --body-file comment.txt
          # 
          # 特に改行を含む複雑な文字列を扱う場合は必ずこの方法を使用してください。
          # インラインでの複雑なエスケープ ($\' や \" の組み合わせ) は避けてください。"
          
      - name: Create PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # タイムスタンプを生成 (YYYYMMDDHHmmss形式)
          TIMESTAMP=$(date '+%Y%m%d%H%M%S')
          BRANCH_NAME="fix-issue-${{ github.event.issue.number }}-$TIMESTAMP"
          
          # 現在の状態を確認
          git status
          
          # 新しいブランチを作成
          git checkout -b $BRANCH_NAME
          
          # ブランチ切り替え後の状態を確認
          git status
          
          # Codexが作成したファイル変更を全て追加
          git add .
          
          # ステージング後の状態を確認
          git status
          
          # Codexにプルリクエストを作成させる
          codex --full-auto --quiet $'以下の手順でプルリクエストを作成してください：
      
          # 変更されたファイルをチェック
          git status
      
          # 適切なコミットメッセージで変更をコミット
          # Issue番号とタイトルを参照し、変更の種類に応じて内容を調整してください
          git commit -m "🔧 fix: #${{ github.event.issue.number }} ${{ github.event.issue.title }}" -m "🔍 問題: ${{ github.event.issue.body }}" -m "✅ 対応: 必要なファイルを追加・修正しました" -m "Issue: #${{ github.event.issue.number }}"
          
          # ブランチをリモートにプッシュ
          git push origin HEAD:$BRANCH_NAME
          
          # 重要：PRやIssueコメントの作成時は、複雑な文字列処理を避けるために一時ファイルを使用してください
          # PRの本文を一時ファイルに書き出す
          echo "## 🚀 対応内容
          ${{ github.event.issue.body }}
          
          ### 🔍 問題と解決策
          Issueの内容に基づいて適切な対応を実施しました。
          
          ### 📝 変更内容
          - 変更したファイルとその内容の説明
          
          ### 🧪 テスト内容
          - 動作確認方法と結果
          
          Fixes #${{ github.event.issue.number }}" > pr_body.txt
          
          # PRを作成 - 一時ファイルを参照
          gh pr create \
            --title "✨ fix: #${{ github.event.issue.number }} ${{ github.event.issue.title }}" \
            --body-file pr_body.txt \
            --base main \
            --head $BRANCH_NAME
          
          # PRのURLを取得
          PR_URL=$(gh pr view --json url -q .url)
          
          # Issueコメントの内容を一時ファイルに書き出す
          echo "🎉 PR作成完了しました！
          
          👀 レビューをお願いします
          🔗 PR: $PR_URL
          
          ### 📋 対応概要
          ${{ github.event.issue.title }}に対応するPRを作成しました。レビューよろしくお願いします！" > comment.txt
          
          # Issueにコメント - 一時ファイルを参照
          gh issue comment ${{ github.event.issue.number }} --body-file comment.txt'
