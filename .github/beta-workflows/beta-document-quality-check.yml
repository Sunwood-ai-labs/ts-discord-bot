name: Document Quality Check (Codex)

on:
  push:
    branches:
      - main
    paths:
      - '**.md'
  pull_request:
    paths:
      - '**.md'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  check-docs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install OpenAI Codex
        run: |
          npm install -g @openai/codex
        
      - name: Check documentation quality with Codex
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CODEX_QUIET_MODE: "1"
        run: |
          # Codexを使ってドキュメントの品質をチェック
          codex -a auto-edit  --quiet  "
          リポジトリのドキュメントを品質チェックしてください。
          
          以下のチェックリストに従って確認し、必要に応じて修正してください：

          ====
          
          # リポジトリ品質確認プロンプト V2
          
          あなたは優れたコードレビューとリポジトリ構造分析の専門家です。以下のチェックリストに沿って、リポジトリ全体の品質確認を行ってください。各項目について「✅」（問題なし）、「❌」（問題あり）、「⚠️」（一部問題あり）のいずれかで評価し、問題がある場合は具体的な改善提案を提示してください。
          
          ## チェックリスト
          
          ### 📝 README.md の品質確認
          - [ ] タイトルは中央揃えになっているか
          - [ ] ヘッダー画像は中央揃えになっているか(既にヘッダー画像がある場合はそれを使用すること)
          - [ ] 技術スタックのバッジが適切に配置され、中央揃えになっているか
          - [ ] 各セクションに絵文字が活用され、可読性が向上しているか
          - [ ] ドキュメントは適切に分割されて、それぞれに適切にリンクされているか
          - [ ] インストール手順が明確に記載されているか
          - [ ] 使用方法が明確に記載されているか
          - [ ] スクリーンショットや図が適切に使用されているか
          
          ### 📚 ドキュメンテーション全体の一貫性
          - [ ] 各階層に README.md が存在するか（なければ作成が必要）
          - [ ] 各階層の README.md が適切に上位階層の README.md を参照しているか
          - [ ] 各 README.md の内容が重複せず、適切に分割されているか
          - [ ] 各 README.md が重くなりすぎていないか、適切にファイル分割されているか
          - [ ] 分割されたファイルに適切にリンクが貼られているか
          - [ ] 全てのドキュメントで一貫した用語が使用されているか
          - [ ] リポジトリ全体でのドキュメントの構造が論理的か
          
          ### 🔒 環境設定とセキュリティ
          - [ ] `.env` や環境変数が適切に使用されているか
          - [ ] 直接コード内にAPIキーやパスワードなどの機密情報が記載されていないか(`.env`にはOK)
          - [ ] `.gitignore` ファイルに `.env` が適切に記載されているか
          - [ ] `.env.example` が存在し、必要な環境変数の例が記載されているか
          
          ### 💻 コード品質
          - [ ] コードコメントは適切に記載されているか
          - [ ] 命名規則が一貫しているか
          - [ ] 未使用のコードやコメントアウトされたコードが放置されていないか
          
          ### 📂 プロジェクト構造
          - [ ] フォルダ構造が論理的で理解しやすいか
          - [ ] 依存関係が適切に管理されているか
          
          ## 出力形式
          
          以下のような形式でチェックリストの結果を出力してください：
          
          ### 📝 README.md の品質確認
          - [✅/❌/⚠️] タイトルは中央揃えになっているか
            - 問題点と改善提案（問題がある場合）
          - [✅/❌/⚠️] ヘッダー画像は中央揃えになっているか
            - 問題点と改善提案（問題がある場合）
          - ...（以下同様）
          
          ### 📚 ドキュメンテーション全体の一貫性
          - [✅/❌/⚠️] 各階層に README.md が存在するか
            - 問題点と改善提案（問題がある場合）
          - [✅/❌/⚠️] 各階層の README.md が適切に上位階層の README.md を参照しているか
            - 問題点と改善提案（問題がある場合）
          - ...（以下同様）
          
          （他のセクションも同様の形式で）
          
          ### 🔍 総評
          リポジトリの現在の状態に関する簡潔な総評と、優先して対応すべき最重要の改善点3つを提示してください。
          
          ### 📝 具体的な修正例
          最も重要な改善点について、具体的なコードやマークダウンの修正例を提示してください。
          
          #### README.md 階層構造確認
          以下の点を特に注意して確認してください：
          1. 各ディレクトリに README.md があるか確認し、なければ作成を提案する
          2. 各 README.md が上位の README.md を適切に参照しているか確認し、重複を避ける
          3. README.md が長すぎる場合は、適切なファイル分割とリンク設定を提案する
          
          ---
          
          このチェックリストに沿って、リポジトリ全体を分析し、開発サイクルのクロージング処理として必要な改善点を明確にしてください。
          
          問題がある場合は自動的に修正し、新しいブランチを作成してプルリクエストを作成してください。
          
          重要: GitHubのトークンは環境変数 GITHUB_TOKEN で利用可能です。
          "
      
      - name: Check if develop branch exists
        id: check-develop
        run: |
          if git ls-remote --heads origin develop | grep develop; then
            echo "develop_exists=true" >> $GITHUB_OUTPUT
          else
            echo "develop_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create develop branch if it doesn't exist
        if: ${{ steps.check-develop.outputs.develop_exists == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout -b develop
          git push origin develop
          echo "Created new develop branch"
      
      - name: Commit changes to temporary branch
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          if [[ -n $(git status -s) ]]; then
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            BRANCH_NAME="docs/quality-improvement-${TIMESTAMP}"
            git checkout -b $BRANCH_NAME
            git add .
            git commit -m "🫐 docs: ドキュメント品質の自動改善"
            git push origin $BRANCH_NAME
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          else
            echo "No changes to commit"
          fi
      
      - name: Create PR to develop
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && env.BRANCH_NAME != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create PR to develop branch
          gh pr create --title "🫐 docs: ドキュメント品質の自動改善" \
                        --body "Codexによるドキュメント品質チェックを実行し、いくつかの改善を行いました。mainブランチからの変更をdevelopブランチにマージします。" \
                        --base develop \
                        --head $BRANCH_NAME
